[{"C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\App.js":"1","C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\WelcomeCard\\WelcomeCard.js":"2","C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\SubsciptionRequests\\SubscriptionRequests.js":"3","C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\PaymentMethodsOverview\\CreatePaymentMethod\\CreatePaymentMethod.js":"4","C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\Login\\Login.js":"5","C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\Routes.js":"6","C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\PaymentMethods\\PaymentMethods.js":"7","C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\services\\SubscriptionRequestsService.js":"8","C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\services\\PaymentMethodsService.js":"9","C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\UI\\Navbar\\Navbar.js":"10","C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\AdminDashboard\\AdminDashboard.js":"11","C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\Transactions\\Transactions.js":"12","C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\Users\\Users.js":"13","C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\UserDashboard\\UserDashboard.js":"14","C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\Users\\UserDetails.js":"15"},{"size":1858,"mtime":1607890211727,"results":"16","hashOfConfig":"17"},{"size":16183,"mtime":1612736051415,"results":"18","hashOfConfig":"17"},{"size":2332,"mtime":1607890211742,"results":"19","hashOfConfig":"17"},{"size":899,"mtime":1607890211738,"results":"20","hashOfConfig":"17"},{"size":2658,"mtime":1612738031368,"results":"21","hashOfConfig":"17"},{"size":1286,"mtime":1612733538729,"results":"22","hashOfConfig":"17"},{"size":4170,"mtime":1612306299440,"results":"23","hashOfConfig":"17"},{"size":1341,"mtime":1612706621782,"results":"24","hashOfConfig":"17"},{"size":1857,"mtime":1612723243340,"results":"25","hashOfConfig":"17"},{"size":1648,"mtime":1612737569717,"results":"26","hashOfConfig":"17"},{"size":4524,"mtime":1612730662861,"results":"27","hashOfConfig":"17"},{"size":2985,"mtime":1612733628091,"results":"28","hashOfConfig":"17"},{"size":3168,"mtime":1612731897960,"results":"29","hashOfConfig":"17"},{"size":1815,"mtime":1612733701793,"results":"30","hashOfConfig":"17"},{"size":14392,"mtime":1612736011337,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13pbv0z",{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},"C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\App.js",[],"C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\WelcomeCard\\WelcomeCard.js",["63"],"C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\SubsciptionRequests\\SubscriptionRequests.js",[],"C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\PaymentMethodsOverview\\CreatePaymentMethod\\CreatePaymentMethod.js",[],"C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\Login\\Login.js",[],"C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\Routes.js",["64"],"C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\PaymentMethods\\PaymentMethods.js",[],"C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\services\\SubscriptionRequestsService.js",[],"C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\services\\PaymentMethodsService.js",[],"C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\UI\\Navbar\\Navbar.js",["65"],"C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\AdminDashboard\\AdminDashboard.js",["66","67","68","69"],"C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\Transactions\\Transactions.js",["70"],"C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\Users\\Users.js",["71"],"C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\UserDashboard\\UserDashboard.js",["72","73","74","75","76"],"C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\Users\\UserDetails.js",["77","78"],"import React, {useEffect, useState} from \"react\";\r\nimport {Alert, Form} from \"react-bootstrap\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport PaymentMethodsService from \"../../services/PaymentMethodsService\";\r\n\r\nexport default function UserDetails(props) {\r\n    const [paymentMethods, setPaymentMethods] = useState([]);\r\n    const [choosenPaymentMethods, setChoosenPaymentMethods] = useState([])\r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const [alertVariant, setAlertVariant] = useState('success');\r\n\r\n    const [userInfo, setUserInfo] = useState({})\r\n\r\n    /* Validation */\r\n    const {register, errors, handleSubmit} = useForm();\r\n\r\n    useEffect(() => {\r\n        PaymentMethodsService.getAll().then((data) => setPaymentMethods(data));\r\n        fetch(\"https://localhost:8081/user/details/\" + JSON.parse(localStorage.getItem(\"token\")), {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + JSON.parse(localStorage.getItem(\"token\"))\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setChoosenPaymentMethods(data.paymentMethods)\r\n                setUserInfo(data);\r\n                console.log(data);\r\n            })\r\n            .catch((error) => {\r\n                console.error(\"Error\", error);\r\n            })\r\n    }, []);\r\n\r\n    function methodsOnChangeHandler(event) {\r\n        const selectedOptions = [...event.target.selectedOptions].map(o => o.value);\r\n        console.log(selectedOptions);\r\n        const methods = selectedOptions.map(option => {\r\n            return paymentMethods.find(m => m.name === option);\r\n        });\r\n        console.log(methods);\r\n        setChoosenPaymentMethods(methods);\r\n    }\r\n\r\n    const createRequestClickHandler = (formData) => {\r\n        alert(\"DATA SAVED\");\r\n    }\r\n\r\n    return (\r\n        <div style={{textAlign: \"-webkit-center\", marginLeft:\"-200px\"}}>\r\n            <div className=\"Subscribe p-5 mb-5\">\r\n                <Form onSubmit={handleSubmit(createRequestClickHandler)}>\r\n                    <Form.Group\r\n                        className=\"InputElement\">\r\n                        <Alert className=\"Alert\" variant={alertVariant} show={showAlert} dismissible={true} transition={true}>\r\n                            {alertVariant === \"success\" ? \"You have submitted request successfully.\" : \"Please fill in all the data.\"}\r\n                        </Alert>\r\n                        <Form.Label className=\"Label text-warning mt-2\">ACCOUNT INFO</Form.Label>\r\n                        <Form.Label className=\"Label\">Username</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter username\"\r\n                                      defaultValue={userInfo.username}\r\n                                      name=\"username\" ref={register({required: true})}\r\n                                      isInvalid={!!errors.username}/>\r\n                        {errors.organizationName &&\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Username is required.\r\n                        </Form.Control.Feedback>}\r\n                    </Form.Group>\r\n                    <Form.Group\r\n                        className=\"InputElement\"\r\n                        controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label className=\"Label text-warning mt-2\">ORGANIZATION INFO</Form.Label>\r\n                        <Form.Label className=\"Label\">Organization name</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter organization name\"\r\n                                      defaultValue={userInfo.subscriberDetails?.organizationName}\r\n                                      name=\"organizationName\" ref={register({required: true})}\r\n                                      isInvalid={!!errors.organizationName}/>\r\n                        {errors.organizationName &&\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Organization name is required.\r\n                        </Form.Control.Feedback>}\r\n                    </Form.Group>\r\n                    <Form.Group\r\n                        className=\"InputElement\"\r\n                        controlId=\"exampleForm.ControlInput2\"\r\n                    >\r\n                        <Form.Label className=\"Label\">Organization email</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter organization email\"\r\n                                      defaultValue={userInfo.subscriberDetails?.organizationEmail}\r\n                                      name=\"organizationEmail\" ref={register({required: true})}\r\n                                      isInvalid={!!errors.organizationEmail}/>\r\n                        {errors.organizationEmail &&\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Organization email is required.\r\n                        </Form.Control.Feedback>}\r\n                    </Form.Group>\r\n                    <Form.Group\r\n                        controlId=\"exampleForm.ControlTextarea1\"\r\n                        className=\"InputElement\">\r\n                        <Form.Label className=\"Label\">\r\n                            Description of your business\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={3}\r\n                            placeholder=\"Describe what you do\"\r\n                            style={{resize: \"none\"}}\r\n                            defaultValue={userInfo.subscriberDetails?.organizationDescription}\r\n                            name=\"organizationDescription\" ref={register({required: true})}\r\n                            isInvalid={!!errors.organizationDescription}\r\n                        />\r\n                        {errors.organizationDescription &&\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Organization description is required.\r\n                        </Form.Control.Feedback>}\r\n                    </Form.Group>\r\n                    <Form.Group\r\n                        controlId=\"exampleForm.ControlSelect2\"\r\n                        className=\"InputElement\">\r\n                        <Form.Label className=\"Label text-warning mt-2\">PAYMENT INFO</Form.Label>\r\n                        <Form.Label className=\"Label\">Select payment methods</Form.Label>\r\n                        { paymentMethods &&\r\n                        <Form.Control as=\"select\" multiple onChange={e => methodsOnChangeHandler(e)}\r\n                                      name=\"organizationPaymentMethods\" ref={register({required: true})}\r\n                                      isInvalid={!!errors.organizationPaymentMethods}>\r\n                            { paymentMethods.map(method => {\r\n                                return <option key={method.id} value={method.name} selected={userInfo.paymentMethods?.find((m => m.id === method.id))}>{method.name}</option>\r\n                            })}\r\n                        </Form.Control>\r\n                        }\r\n                        {errors.organizationPaymentMethods &&\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Organization payment methods are required.\r\n                        </Form.Control.Feedback>}\r\n                    </Form.Group>\r\n                    <Form.Group\r\n                        className=\"InputElement\">\r\n                        <Form.Label className=\"Label\">Success URL</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter success URL\"\r\n                                      defaultValue={userInfo.subscriberDetails?.successUrl}\r\n                                      name=\"successUrl\" ref={register({required: true})}\r\n                                      isInvalid={!!errors.successUrl}/>\r\n                        {errors.successUrl &&\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            URL is required.\r\n                        </Form.Control.Feedback>}\r\n                    </Form.Group>\r\n                    <Form.Group\r\n                        className=\"InputElement\">\r\n                        <Form.Label className=\"Label\">Failed URL</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter failed URL\"\r\n                                      defaultValue={userInfo.subscriberDetails?.failedUrl}\r\n                                      name=\"failedUrl\" ref={register({required: true})}\r\n                                      isInvalid={!!errors.failedUrl}/>\r\n                        {errors.failedUrl &&\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            URL is required.\r\n                        </Form.Control.Feedback>}\r\n                    </Form.Group>\r\n                    <Form.Group\r\n                        className=\"InputElement\">\r\n                        <Form.Label className=\"Label\">Error URL</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter error URL\"\r\n                                      defaultValue={userInfo.subscriberDetails?.errorUrl}\r\n                                      name=\"errorUrl\" ref={register({required: true})}\r\n                                      isInvalid={!!errors.errorUrl}/>\r\n                        {errors.errorUrl &&\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            URL is required.\r\n                        </Form.Control.Feedback>}\r\n                    </Form.Group>\r\n                    {   choosenPaymentMethods.find((method) => method.name === \"Bank\") &&\r\n                    <>\r\n                        <Form.Group\r\n                            className=\"InputElement\">\r\n                            <Form.Label className=\"Label text-warning mt-2\">BANK PAYMENT INFO</Form.Label>\r\n                            <Form.Label className=\"Label\">Bank merchant ID</Form.Label>\r\n                            <Form.Control type=\"password\" placeholder=\"Enter bank merchant ID\"\r\n                                          name=\"merchantId\" ref={register({required: true})}\r\n                                          isInvalid={!!errors.merchantId}/>\r\n                            {errors.merchantId &&\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                Merchant ID is required.\r\n                            </Form.Control.Feedback>}\r\n                        </Form.Group>\r\n                        <Form.Group\r\n                            className=\"InputElement\">\r\n                            <Form.Label className=\"Label\">Bank password</Form.Label>\r\n                            <Form.Control type=\"password\" placeholder=\"Enter bank merchant password\"\r\n                                          name=\"merchantPassword\" ref={register({required: true})}\r\n                                          isInvalid={!!errors.merchantPassword}/>\r\n                            {errors.merchantPassword &&\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                Merchant password is required.\r\n                            </Form.Control.Feedback>}\r\n                        </Form.Group>\r\n                    </>\r\n                    }\r\n                    {   choosenPaymentMethods.find((method) => method.name === \"PayPal\") &&\r\n                    <>\r\n                        <Form.Group\r\n                            className=\"InputElement\">\r\n                            <Form.Label className=\"Label text-warning mt-2\">PAYPAL PAYMENT INFO</Form.Label>\r\n                            <Form.Label className=\"Label\">PayPal client ID</Form.Label>\r\n                            <Form.Control type=\"password\" placeholder=\"Enter PayPal client ID\"\r\n                                          name=\"clientId\" ref={register({required: true})}\r\n                                          isInvalid={!!errors.clientId}/>\r\n                            {errors.clientId &&\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                Client ID is required.\r\n                            </Form.Control.Feedback>}\r\n                        </Form.Group>\r\n                        <Form.Group\r\n                            className=\"InputElement\">\r\n                            <Form.Label className=\"Label\">PayPal client password</Form.Label>\r\n                            <Form.Control type=\"password\" placeholder=\"Enter PayPal client password\"\r\n                                          name=\"clientPassword\" ref={register({required: true})}\r\n                                          isInvalid={!!errors.clientPassword}/>\r\n                            {errors.clientPassword &&\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                Client password is required.\r\n                            </Form.Control.Feedback>}\r\n                        </Form.Group>\r\n                    </>\r\n                    }\r\n                    {   choosenPaymentMethods.find((method) => method.name === \"Bitcoin\") &&\r\n                    <Form.Group\r\n                        className=\"InputElement\">\r\n                        <Form.Label className=\"Label text-warning mt-2\">BITCOIN PAYMENT INFO</Form.Label>\r\n                        <Form.Label className=\"Label\">Bitcoin token</Form.Label>\r\n                        <Form.Control type=\"password\" placeholder=\"Enter Bitcoin token\"\r\n                                      name=\"bitcoinToken\" ref={register({required: true})}\r\n                                      isInvalid={!!errors.bitcoinToken}/>\r\n                        {errors.bitcoinToken &&\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Bitcoin token is required.\r\n                        </Form.Control.Feedback>}\r\n                    </Form.Group>\r\n                    }\r\n                    <div className=\"ButtonWrapper\">\r\n                        <button className=\"Button Gray mt-3\" type=\"submit\">\r\n                            Save\r\n                        </button>\r\n                    </div>\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    );\r\n}",{"ruleId":"79","severity":1,"message":"80","line":5,"column":21,"nodeType":"81","messageId":"82","endLine":5,"endColumn":27},{"ruleId":"79","severity":1,"message":"83","line":2,"column":9,"nodeType":"81","messageId":"82","endLine":2,"endColumn":17},{"ruleId":"79","severity":1,"message":"83","line":5,"column":9,"nodeType":"81","messageId":"82","endLine":5,"endColumn":17},{"ruleId":"84","severity":1,"message":"85","line":87,"column":26,"nodeType":"86","messageId":"87","endLine":87,"endColumn":28},{"ruleId":"84","severity":1,"message":"85","line":91,"column":26,"nodeType":"86","messageId":"87","endLine":91,"endColumn":28},{"ruleId":"84","severity":1,"message":"85","line":95,"column":26,"nodeType":"86","messageId":"87","endLine":95,"endColumn":28},{"ruleId":"84","severity":1,"message":"85","line":98,"column":26,"nodeType":"86","messageId":"87","endLine":98,"endColumn":28},{"ruleId":"79","severity":1,"message":"80","line":2,"column":9,"nodeType":"81","messageId":"82","endLine":2,"endColumn":15},{"ruleId":"79","severity":1,"message":"88","line":1,"column":17,"nodeType":"81","messageId":"82","endLine":1,"endColumn":22},{"ruleId":"79","severity":1,"message":"89","line":3,"column":8,"nodeType":"81","messageId":"82","endLine":3,"endColumn":28},{"ruleId":"79","severity":1,"message":"90","line":4,"column":8,"nodeType":"81","messageId":"82","endLine":4,"endColumn":30},{"ruleId":"79","severity":1,"message":"91","line":6,"column":8,"nodeType":"81","messageId":"82","endLine":6,"endColumn":13},{"ruleId":"84","severity":1,"message":"85","line":36,"column":26,"nodeType":"86","messageId":"87","endLine":36,"endColumn":28},{"ruleId":"84","severity":1,"message":"85","line":39,"column":26,"nodeType":"86","messageId":"87","endLine":39,"endColumn":28},{"ruleId":"79","severity":1,"message":"92","line":9,"column":23,"nodeType":"81","messageId":"82","endLine":9,"endColumn":35},{"ruleId":"79","severity":1,"message":"93","line":10,"column":26,"nodeType":"81","messageId":"82","endLine":10,"endColumn":41},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Modal' is defined but never used.","'SubscriptionRequests' is defined but never used.","'PaymentMethodsOverview' is defined but never used.","'Users' is defined but never used.","'setShowAlert' is assigned a value but never used.","'setAlertVariant' is assigned a value but never used."]