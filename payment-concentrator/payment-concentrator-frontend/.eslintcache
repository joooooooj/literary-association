[{"C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\Routes.js":"1","C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\WelcomeCard\\WelcomeCard.js":"2","C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\Payment\\ChoosePaymentMethod.js":"3","C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\index.js":"4","C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\UI\\Navbar\\Navbar.js":"5","C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\Login\\Login.js":"6","C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\AdminDashboard\\AdminDashboard.js":"7","C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\services\\PaymentMethodsService.js":"8","C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\PaymentMethodsOverview\\PaymentMethodsOverview.js":"9","C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\Transactions\\Transactions.js":"10","C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\PaymentMethodsOverview\\CreatePaymentMethod\\CreatePaymentMethod.js":"11","C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\services\\SubscriptionRequestsService.js":"12","C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\PaymentMethods\\PaymentMethods.js":"13","C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\Users\\Users.js":"14"},{"size":1286,"mtime":1612738465711,"results":"15","hashOfConfig":"16"},{"size":16183,"mtime":1612736051415,"results":"17","hashOfConfig":"16"},{"size":8464,"mtime":1612742921961,"results":"18","hashOfConfig":"16"},{"size":670,"mtime":1607164249770,"results":"19","hashOfConfig":"16"},{"size":1648,"mtime":1612737569717,"results":"20","hashOfConfig":"16"},{"size":2561,"mtime":1612738411296,"results":"21","hashOfConfig":"16"},{"size":4524,"mtime":1612730662861,"results":"22","hashOfConfig":"16"},{"size":1857,"mtime":1612723243340,"results":"23","hashOfConfig":"16"},{"size":1398,"mtime":1612306299441,"results":"24","hashOfConfig":"16"},{"size":2985,"mtime":1612733628091,"results":"25","hashOfConfig":"16"},{"size":899,"mtime":1607890211738,"results":"26","hashOfConfig":"16"},{"size":1341,"mtime":1612706621782,"results":"27","hashOfConfig":"16"},{"size":4170,"mtime":1612306299440,"results":"28","hashOfConfig":"16"},{"size":3168,"mtime":1612731897960,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},"13pbv0z",{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"33"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"33"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\Routes.js",["64"],"import React from \"react\";\r\nimport {Redirect, Route, Switch} from \"react-router\";\r\nimport WelcomeCard from \"./components/WelcomeCard/WelcomeCard\";\r\nimport LoginComponent from \"./components/Login/Login\";\r\nimport PaymentMethodsComponent from \"./components/PaymentMethods/PaymentMethods\";\r\nimport AdminDashboard from \"./components/AdminDashboard/AdminDashboard\";\r\nimport ChoosePaymentMethod from \"./components/Payment/ChoosePaymentMethod\";\r\nimport UserDashboard from \"./components/UserDashboard/UserDashboard\";\r\n\r\nexport default function Routes(props) {\r\n    return (<Switch>\r\n        <Route component={WelcomeCard} path=\"/\" exact/>\r\n        <Route component={ChoosePaymentMethod} path=\"/payment-methods/:request_id/:token\" exact/>\r\n        <Route render={() => (<LoginComponent log={props.log}/>)} path=\"/login\" exact/>\r\n        <Route\r\n            component={PaymentMethodsComponent}\r\n            path=\"/payment-methods\"\r\n            exact\r\n        />\r\n        { (props.loggedIn !== null && props.roles === \"ROLE_ADMIN\") &&\r\n            <Route component={AdminDashboard} path=\"/dashboard\" exact/>\r\n        }\r\n        { (props.loggedIn !== null && props.roles === \"ROLE_SUBSCRIBER\") &&\r\n            <Route component={UserDashboard} path=\"/dashboard\" exact/>\r\n        }\r\n    </Switch>);\r\n}",["65","66"],"C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\WelcomeCard\\WelcomeCard.js",["67"],"import React, {useState, useEffect} from \"react\";\r\nimport {useForm} from \"react-hook-form\";\r\n\r\nimport \"./WelcomeCard.scss\";\r\nimport {Form, Alert,Button} from \"react-bootstrap\";\r\nimport PaymentMethodsService from \"../../services/PaymentMethodsService\";\r\n\r\nexport default function WelcomeCard(props) {\r\n    const [visible, setVisible] = useState(false);\r\n    const [paymentMethods, setPaymentMethods] = useState([]);\r\n    const [choosenPaymentMethods, setChoosenPaymentMethods] = useState([])\r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const [alertVariant, setAlertVariant] = useState('success');\r\n\r\n    /* Validation */\r\n    const {register, errors, handleSubmit} = useForm();\r\n\r\n    useEffect(() => {\r\n        PaymentMethodsService.getAll().then((data) => setPaymentMethods(data));\r\n    }, []);\r\n\r\n    const showFormClickHandler = () => {\r\n        setVisible(true);\r\n    };\r\n\r\n    function methodsOnChangeHandler(event) {\r\n        const selectedOptions = [...event.target.selectedOptions].map(o => o.value);\r\n        console.log(selectedOptions);\r\n        const methods = selectedOptions.map(option => {\r\n            return paymentMethods.find(m => m.name === option);\r\n        });\r\n        console.log(methods);\r\n        setChoosenPaymentMethods(methods);\r\n    }\r\n\r\n    const createRequestClickHandler = (formData) => {\r\n        formData.paymentMethods = choosenPaymentMethods;\r\n        fetch(\"https://localhost:8081/api/auth/subscribe\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(formData)\r\n        })\r\n            .then(response => response.json())\r\n            .then((data) => {\r\n                console.log(data);\r\n                setShowAlert(true);\r\n                setAlertVariant('success');\r\n                setTimeout(() => {\r\n                    setShowAlert(false);\r\n                    props.history.push( \"/login\");\r\n                }, 2000);\r\n            }).catch((error) => {\r\n            setShowAlert(true);\r\n            setAlertVariant('danger');\r\n            setTimeout(() => {\r\n                setShowAlert(false);\r\n            }, 2000);\r\n        });;\r\n    }\r\n\r\n    return (\r\n        <div className=\"Content\">\r\n            <div className=\"WelcomeCard\">\r\n                <h1 className=\"WelcomeTittle\">Sign up right now!</h1>\r\n                <p className=\"WelcomeText\">\r\n                    {\" \"}\r\n                    We are a company that proved payment services to anyone who needs it.\r\n                    We provide different kind of payment services such as via Bank, Paypal\r\n                    and Bitcoin. If you think this is what you need, feel free to submit\r\n                    your request and we will contact you soon!\r\n                </p>\r\n                <button\r\n                    className=\"Button Green\"\r\n                    onClick={showFormClickHandler}>\r\n                    Sign up!\r\n                </button>\r\n            </div>\r\n            <div className=\"Subscribe p-5 mb-5\" hidden={!visible}>\r\n                <Form onSubmit={handleSubmit(createRequestClickHandler)}>\r\n                    <Form.Group\r\n                        className=\"InputElement\">\r\n                        <Alert className=\"Alert\" variant={alertVariant} show={showAlert} dismissible={true} transition={true}>\r\n                            {alertVariant === \"success\" ? \"You have submitted request successfully.\" : \"Please fill in all the data.\"}\r\n                        </Alert>\r\n                        <Form.Label className=\"Label text-warning mt-2\">ACCOUNT INFO</Form.Label>\r\n                        <Form.Label className=\"Label\">Username</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter username\"\r\n                                      name=\"username\" ref={register({required: true})}\r\n                                      isInvalid={!!errors.username}/>\r\n                        {errors.organizationName &&\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Username is required.\r\n                        </Form.Control.Feedback>}\r\n                    </Form.Group>\r\n                    <Form.Group\r\n                        className=\"InputElement\">\r\n                        <Form.Label className=\"Label\">Password</Form.Label>\r\n                        <Form.Control type=\"password\" placeholder=\"Enter password\"\r\n                                      name=\"password\"\r\n                                      ref={register(\r\n                                            {\r\n                                              required: {\r\n                                                  value: true,\r\n                                                  message: \"Password is required.\"\r\n                                              },\r\n                                              pattern: {\r\n                                                  value: /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-.]).{8,}$/,\r\n                                                  message: \"Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character!\"\r\n                                              }\r\n                                          })}\r\n                                      isInvalid={!!errors.password}/>\r\n                        {errors.password &&\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            {errors.password.message}\r\n                        </Form.Control.Feedback>}\r\n                    </Form.Group>\r\n                    <Form.Group\r\n                        className=\"InputElement\"\r\n                        controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label className=\"Label text-warning mt-2\">ORGANIZATION INFO</Form.Label>\r\n                        <Form.Label className=\"Label\">Organization name</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter organization name\"\r\n                                      name=\"organizationName\" ref={register({required: true})}\r\n                                      isInvalid={!!errors.organizationName}/>\r\n                        {errors.organizationName &&\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Organization name is required.\r\n                        </Form.Control.Feedback>}\r\n                    </Form.Group>\r\n                    <Form.Group\r\n                        className=\"InputElement\"\r\n                        controlId=\"exampleForm.ControlInput2\"\r\n                    >\r\n                        <Form.Label className=\"Label\">Organization email</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter organization email\"\r\n                                      name=\"organizationEmail\" ref={register({required: true})}\r\n                                      isInvalid={!!errors.organizationEmail}/>\r\n                        {errors.organizationEmail &&\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Organization email is required.\r\n                        </Form.Control.Feedback>}\r\n                    </Form.Group>\r\n                    <Form.Group\r\n                        controlId=\"exampleForm.ControlTextarea1\"\r\n                        className=\"InputElement\">\r\n                        <Form.Label className=\"Label\">\r\n                            Description of your business\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={3}\r\n                            placeholder=\"Describe what you do\"\r\n                            style={{resize: \"none\"}}\r\n                            name=\"organizationDescription\" ref={register({required: true})}\r\n                            isInvalid={!!errors.organizationDescription}\r\n                        />\r\n                        {errors.organizationDescription &&\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Organization description is required.\r\n                        </Form.Control.Feedback>}\r\n                    </Form.Group>\r\n                    <Form.Group\r\n                        controlId=\"exampleForm.ControlSelect2\"\r\n                        className=\"InputElement\">\r\n                        <Form.Label className=\"Label text-warning mt-2\">PAYMENT INFO</Form.Label>\r\n                        <Form.Label className=\"Label\">Select payment methods</Form.Label>\r\n                        { paymentMethods &&\r\n                        <Form.Control as=\"select\" multiple onChange={e => methodsOnChangeHandler(e)}\r\n                            name=\"organizationPaymentMethods\" ref={register({required: true})}\r\n                            isInvalid={!!errors.organizationPaymentMethods}>\r\n                            { paymentMethods.map(method => {\r\n                                return <option key={method.id} value={method.name}>{method.name}</option>\r\n                            })}\r\n                        </Form.Control>\r\n                        }\r\n                        {errors.organizationPaymentMethods &&\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Organization payment methods are required.\r\n                        </Form.Control.Feedback>}\r\n                    </Form.Group>\r\n                    <Form.Group\r\n                        className=\"InputElement\">\r\n                        <Form.Label className=\"Label\">Success URL</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter success URL\"\r\n                                      name=\"successUrl\" ref={register({required: true})}\r\n                                      isInvalid={!!errors.successUrl}/>\r\n                        {errors.successUrl &&\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            URL is required.\r\n                        </Form.Control.Feedback>}\r\n                    </Form.Group>\r\n                    <Form.Group\r\n                        className=\"InputElement\">\r\n                        <Form.Label className=\"Label\">Failed URL</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter failed URL\"\r\n                                      name=\"failedUrl\" ref={register({required: true})}\r\n                                      isInvalid={!!errors.failedUrl}/>\r\n                        {errors.failedUrl &&\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            URL is required.\r\n                        </Form.Control.Feedback>}\r\n                    </Form.Group>\r\n                    <Form.Group\r\n                        className=\"InputElement\">\r\n                        <Form.Label className=\"Label\">Error URL</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter error URL\"\r\n                                      name=\"errorUrl\" ref={register({required: true})}\r\n                                      isInvalid={!!errors.errorUrl}/>\r\n                        {errors.errorUrl &&\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            URL is required.\r\n                        </Form.Control.Feedback>}\r\n                    </Form.Group>\r\n                    {   choosenPaymentMethods.find((method) => method.name === \"Bank\") &&\r\n                    <>\r\n                        <Form.Group\r\n                            className=\"InputElement\">\r\n                            <Form.Label className=\"Label text-warning mt-2\">BANK PAYMENT INFO</Form.Label>\r\n                            <Form.Label className=\"Label\">Bank merchant ID</Form.Label>\r\n                            <Form.Control type=\"password\" placeholder=\"Enter bank merchant ID\"\r\n                                          name=\"merchantId\" ref={register({required: true})}\r\n                                          isInvalid={!!errors.merchantId}/>\r\n                            {errors.merchantId &&\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                Merchant ID is required.\r\n                            </Form.Control.Feedback>}\r\n                        </Form.Group>\r\n                        <Form.Group\r\n                            className=\"InputElement\">\r\n                            <Form.Label className=\"Label\">Bank password</Form.Label>\r\n                            <Form.Control type=\"password\" placeholder=\"Enter bank merchant password\"\r\n                                          name=\"merchantPassword\" ref={register({required: true})}\r\n                                          isInvalid={!!errors.merchantPassword}/>\r\n                            {errors.merchantPassword &&\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                Merchant password is required.\r\n                            </Form.Control.Feedback>}\r\n                        </Form.Group>\r\n                    </>\r\n                    }\r\n                    {   choosenPaymentMethods.find((method) => method.name === \"PayPal\") &&\r\n                    <>\r\n                        <Form.Group\r\n                            className=\"InputElement\">\r\n                            <Form.Label className=\"Label text-warning mt-2\">PAYPAL PAYMENT INFO</Form.Label>\r\n                            <Form.Label className=\"Label\">PayPal client ID</Form.Label>\r\n                            <Form.Control type=\"password\" placeholder=\"Enter PayPal client ID\"\r\n                                          name=\"clientId\" ref={register({required: true})}\r\n                                          isInvalid={!!errors.clientId}/>\r\n                            {errors.clientId &&\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                Client ID is required.\r\n                            </Form.Control.Feedback>}\r\n                        </Form.Group>\r\n                        <Form.Group\r\n                            className=\"InputElement\">\r\n                            <Form.Label className=\"Label\">PayPal client password</Form.Label>\r\n                            <Form.Control type=\"password\" placeholder=\"Enter PayPal client password\"\r\n                                          name=\"clientPassword\" ref={register({required: true})}\r\n                                          isInvalid={!!errors.clientPassword}/>\r\n                            {errors.clientPassword &&\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                Client password is required.\r\n                            </Form.Control.Feedback>}\r\n                        </Form.Group>\r\n                    </>\r\n                    }\r\n                    {   choosenPaymentMethods.find((method) => method.name === \"Bitcoin\") &&\r\n                        <Form.Group\r\n                            className=\"InputElement\">\r\n                            <Form.Label className=\"Label text-warning mt-2\">BITCOIN PAYMENT INFO</Form.Label>\r\n                            <Form.Label className=\"Label\">Bitcoin token</Form.Label>\r\n                            <Form.Control type=\"password\" placeholder=\"Enter Bitcoin token\"\r\n                                          name=\"bitcoinToken\" ref={register({required: true})}\r\n                                          isInvalid={!!errors.bitcoinToken}/>\r\n                            {errors.bitcoinToken &&\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                Bitcoin token is required.\r\n                            </Form.Control.Feedback>}\r\n                        </Form.Group>\r\n                    }\r\n                    <div className=\"ButtonWrapper\">\r\n                        <button className=\"Button Gray mt-3\" type=\"submit\"\r\n                        >Subscribe\r\n                        </button>\r\n                    </div>\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\Payment\\ChoosePaymentMethod.js",["68"],"import BankIcon from \"../../images/bank2.png\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport PayPalIcon from \"../../images/paypal.png\";\r\nimport BitcoinIcon from \"../../images/bitcoin.png\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nexport default function ChoosePaymentMethod(props) {\r\n\r\n    const [buyerRequest, setBuyerRequest] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (props?.match?.params?.token) {\r\n            fetch('https://localhost:8081/buyer-request/' + props?.match?.params?.request_id, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': 'Bearer ' + props.match.params.token\r\n                }\r\n            })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    if (data.username != null) {\r\n                        setBuyerRequest(data);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.error('Error:', error);\r\n                });\r\n        }\r\n    }, [])\r\n\r\n    const methodAllowed = (method) => {\r\n        let allowed = false;\r\n        if (buyerRequest) {\r\n            buyerRequest.paymentMethods.forEach((m) => {\r\n                if (m.name === method) {\r\n                    allowed = true;\r\n                    return;\r\n                }\r\n            })\r\n        }\r\n        return allowed;\r\n    }\r\n\r\n    const handlePayWithPayPalClick = () => {\r\n        // alert(props.match.params.request_id)\r\n        fetch('https://localhost:8081/pay-pal/create', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                userId: 2,\r\n                merchantOrderId: buyerRequest.buyerRequestDTO.merchantOrderId,\r\n                merchantTimestamp: buyerRequest.buyerRequestDTO.merchantTimestamp[0] + '-' + buyerRequest.buyerRequestDTO.merchantTimestamp[1]\r\n                    + '-' + buyerRequest.buyerRequestDTO.merchantTimestamp[2] + ' ' + buyerRequest.buyerRequestDTO.merchantTimestamp[3] + ':' + buyerRequest.buyerRequestDTO.merchantTimestamp[4]\r\n                    + ':' + buyerRequest.buyerRequestDTO.merchantTimestamp[5] + 'Z',\r\n                amount: buyerRequest.buyerRequestDTO.amount,\r\n                buyerRequestId: props.match.params.request_id\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                window.location.replace(data.redirectUrl);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n            });\r\n    }\r\n\r\n    const handleBitcoinPayment = () => {\r\n        fetch('https://localhost:8081/api/auth/bitcoin/transaction/' + props.match.params.request_id, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.url != null) {\r\n                    console.log(JSON.stringify(data))\r\n                    window.location.replace(data.url);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n            });\r\n    }\r\n\r\n    const handleBankPayment = () => {\r\n        fetch('https://localhost:8081/api/auth/bank/transaction/' + props.match.params.request_id, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.url != null) {\r\n                    console.log(JSON.stringify(data))\r\n                    window.location.replace(data.url);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <div className=\"bg-light w-75 text-center\" style={{marginLeft: \"12%\", opacity: \"0.8\", borderRadius: \"5px\"}}>\r\n            {\r\n                buyerRequest &&\r\n                <>\r\n                    <h2 className=\"pt-5\">Order Details</h2>\r\n                    <div className=\"mt-5\" style={{marginLeft: \"25%\"}}>\r\n                        <h4 className=\"text-left\">Order Id : {buyerRequest.buyerRequestDTO.merchantOrderId}</h4>\r\n                        <h4 className=\"text-left\">Merchant: {buyerRequest.username}</h4>\r\n                        <h4 className=\"text-left\">Total : {buyerRequest.buyerRequestDTO.amount}$</h4>\r\n                    </div>\r\n                    <h2 className=\"pt-5\">Please choose payment method</h2>\r\n                    <div className=\"row list-inline-item mt-5 pb-5\" style={{placeContent: \"center\"}}>\r\n                        {methodAllowed(\"Bank\") &&\r\n                        <div className=\"border border-dark\" style={{height: \"270px\", width: \"300px\"}}>\r\n                            <img\r\n                                src={BankIcon}\r\n                                style={{height: \"200px\"}}\r\n                                alt=\"Bank\"\r\n                            />\r\n                            <div className=\"row\" style={{placeContent: \"center\"}}>\r\n                                <Button variant=\"danger\"\r\n                                        style={{\r\n                                            fontSize: \"22px\",\r\n                                            paddingLeft: \"20px\", paddingRight: \"20px\",\r\n                                            width: \"100px\"\r\n                                        }}\r\n                                        onClick={() => handleBankPayment()}>\r\n                                    Pay\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                        }\r\n                        {methodAllowed(\"PayPal\") &&\r\n                        <div className=\"ml-5 border border-dark\" style={{height: \"270px\", width: \"300px\"}}>\r\n                            <img\r\n                                src={PayPalIcon}\r\n                                style={{height: \"200px\"}}\r\n                                alt=\"PayPal\"\r\n                            />\r\n                            <div className=\"row\" style={{placeContent: \"center\"}}>\r\n                                <Button variant=\"danger\"\r\n                                        onClick={() => {\r\n                                            handlePayWithPayPalClick()\r\n                                        }}\r\n                                        style={{\r\n                                            fontSize: \"22px\",\r\n                                            paddingLeft: \"20px\",\r\n                                            paddingRight: \"20px\",\r\n                                            width: \"100px\"\r\n                                        }}>\r\n                                    Pay\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                        }\r\n                        {methodAllowed(\"Bitcoin\") &&\r\n                        <div className=\"ml-5 border border-dark\" style={{height: \"270px\", width: \"300px\"}}>\r\n                            <img\r\n                                src={BitcoinIcon}\r\n                                style={{height: \"160px\"}}\r\n                                alt=\"BitCoin\"\r\n                                className=\"mt-3\"\r\n                            />\r\n                            <div className=\"row mt-4\" style={{placeContent: \"center\"}}>\r\n                                <Button variant=\"danger\"\r\n                                        style={{\r\n                                            fontSize: \"22px\",\r\n                                            paddingLeft: \"20px\",\r\n                                            paddingRight: \"20px\",\r\n                                            width: \"100px\"\r\n                                            }}\r\n                                        onClick = {() => handleBitcoinPayment()}>\r\n                                    Pay\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                        }\r\n                    </div>\r\n                </>\r\n            }\r\n        </div>\r\n    );\r\n}",["69","70"],"C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\index.js",[],"C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\UI\\Navbar\\Navbar.js",["71"],"import React from \"react\";\r\nimport {Nav, Navbar, Button} from \"react-bootstrap\";\r\nimport LoginIcon from \"@material-ui/icons/AccountCircleSharp\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {Redirect} from \"react-router\";\r\n\r\nexport default function navbar(props) {\r\n    const logout = () => {\r\n        props.log(null, null);\r\n        window.location.replace(\"https://localhost:3001/login\");\r\n    }\r\n\r\n    return (\r\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\" className=\"mb-5\">\r\n            <Navbar.Brand>Payment Concentrator</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\r\n            {(props.loggedIn === null)?\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"w-100\">\r\n                        <Link className=\"nav-link\" to=\"/\">Home</Link>\r\n                        <Link className=\"nav-link\" to=\"/payment-methods\">Payment methods overview</Link>\r\n                    </Nav>\r\n                    <Nav>\r\n                        <Link className=\"nav-link\" to=\"/\">Register</Link>\r\n                        <Link className=\"nav-link float-right d-flex\" to=\"/login\"><LoginIcon/>Login</Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n                :\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"w-100\">\r\n                    </Nav>\r\n                    <Button variant=\"outline-primary\" className=\"nav-link float-right d-flex\" onClick={() => logout()}><LoginIcon/>Logout</Button>\r\n                </Navbar.Collapse>\r\n            }\r\n        </Navbar>\r\n    );\r\n}\r\n","C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\Login\\Login.js",[],"C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\AdminDashboard\\AdminDashboard.js",["72","73","74","75"],"C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\services\\PaymentMethodsService.js",[],"C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\PaymentMethodsOverview\\PaymentMethodsOverview.js",[],"C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\Transactions\\Transactions.js",["76"],"C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\PaymentMethodsOverview\\CreatePaymentMethod\\CreatePaymentMethod.js",[],"C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\services\\SubscriptionRequestsService.js",[],"C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\PaymentMethods\\PaymentMethods.js",[],"C:\\Users\\Ika\\Desktop\\literary-association\\payment-concentrator\\payment-concentrator-frontend\\src\\components\\Users\\Users.js",["77"],{"ruleId":"78","severity":1,"message":"79","line":2,"column":9,"nodeType":"80","messageId":"81","endLine":2,"endColumn":17},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"78","severity":1,"message":"86","line":5,"column":21,"nodeType":"80","messageId":"81","endLine":5,"endColumn":27},{"ruleId":"87","severity":1,"message":"88","line":30,"column":8,"nodeType":"89","endLine":30,"endColumn":10,"suggestions":"90"},{"ruleId":"82","replacedBy":"91"},{"ruleId":"84","replacedBy":"92"},{"ruleId":"78","severity":1,"message":"79","line":5,"column":9,"nodeType":"80","messageId":"81","endLine":5,"endColumn":17},{"ruleId":"93","severity":1,"message":"94","line":87,"column":26,"nodeType":"95","messageId":"96","endLine":87,"endColumn":28},{"ruleId":"93","severity":1,"message":"94","line":91,"column":26,"nodeType":"95","messageId":"96","endLine":91,"endColumn":28},{"ruleId":"93","severity":1,"message":"94","line":95,"column":26,"nodeType":"95","messageId":"96","endLine":95,"endColumn":28},{"ruleId":"93","severity":1,"message":"94","line":98,"column":26,"nodeType":"95","messageId":"96","endLine":98,"endColumn":28},{"ruleId":"78","severity":1,"message":"86","line":2,"column":9,"nodeType":"80","messageId":"81","endLine":2,"endColumn":15},{"ruleId":"78","severity":1,"message":"97","line":1,"column":17,"nodeType":"80","messageId":"81","endLine":1,"endColumn":22},"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","no-native-reassign",["98"],"no-negated-in-lhs",["99"],"'Button' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.match.params?.request_id' and 'props.match.params.token'. Either include them or remove the dependency array.","ArrayExpression",["100"],["98"],["99"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Modal' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"101","fix":"102"},"Update the dependencies array to be: [props.match.params?.request_id, props.match.params.token]",{"range":"103","text":"104"},[1116,1118],"[props.match.params?.request_id, props.match.params.token]"]